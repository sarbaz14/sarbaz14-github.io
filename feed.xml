<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sarbaz14.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sarbaz14.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-18T23:42:17+00:00</updated><id>https://sarbaz14.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">The Beauty of Mathematics</title><link href="https://sarbaz14.github.io/sample-posts/2024/01/17/math.html" rel="alternate" type="text/html" title="The Beauty of Mathematics"/><published>2024-01-17T17:40:00+00:00</published><updated>2024-01-17T17:40:00+00:00</updated><id>https://sarbaz14.github.io/sample-posts/2024/01/17/math</id><content type="html" xml:base="https://sarbaz14.github.io/sample-posts/2024/01/17/math.html"><![CDATA[<p>In the name of Allah.</p> <p>Mathematics is a world of beauty. The more we get familiar with mathematics, the more we understand its beauty. One of the beauties of mathematics is the shapes created by the function diagram. For example, the function diagram below forms a heart-shaped graph:</p> \[((x^2 + y^2 -1)^3) -(x^2)(y^3)\] <p>The image of the diagram of this relationship:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/heart-480.webp 480w,/assets/img/heart-800.webp 800w,/assets/img/heart-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/heart.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="Mathematics"/><category term="Beauty-of-Numbers"/><category term="Functions"/><summary type="html"><![CDATA[A post about the beauty of mathematics]]></summary></entry><entry><title type="html">Merge sort</title><link href="https://sarbaz14.github.io/sample-posts/2024/01/17/Ccode.html" rel="alternate" type="text/html" title="Merge sort"/><published>2024-01-17T05:20:00+00:00</published><updated>2024-01-17T05:20:00+00:00</updated><id>https://sarbaz14.github.io/sample-posts/2024/01/17/Ccode</id><content type="html" xml:base="https://sarbaz14.github.io/sample-posts/2024/01/17/Ccode.html"><![CDATA[<p>In the name of Allah.</p> <p>merge sort with c programming language:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// C program for Merge Sort </span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> </span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="c1"> </span><span class="cp">
</span>
<span class="c1">// Merges two subarrays of arr[]. </span>
<span class="c1">// First subarray is arr[l..m] </span>
<span class="c1">// Second subarray is arr[m+1..r] </span>
<span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> 
<span class="p">{</span> 
	<span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">m</span><span class="p">;</span> 

	<span class="c1">// Create temp arrays </span>
	<span class="kt">int</span> <span class="n">L</span><span class="p">[</span><span class="n">n1</span><span class="p">],</span> <span class="n">R</span><span class="p">[</span><span class="n">n2</span><span class="p">];</span> 

	<span class="c1">// Copy data to temp arrays </span>
	<span class="c1">// L[] and R[] </span>
	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
		<span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">l</span> <span class="o">+</span> <span class="n">i</span><span class="p">];</span> 
	<span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> 
		<span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">j</span><span class="p">];</span> 

	<span class="c1">// Merge the temp arrays back </span>
	<span class="c1">// into arr[l..r] </span>
	<span class="c1">// Initial index of first subarray </span>
	<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

	<span class="c1">// Initial index of second subarray </span>
	<span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

	<span class="c1">// Initial index of merged subarray </span>
	<span class="n">k</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> 
	<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">)</span> <span class="p">{</span> 
		<span class="k">if</span> <span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span> 
			<span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> 
			<span class="n">i</span><span class="o">++</span><span class="p">;</span> 
		<span class="p">}</span> 
		<span class="k">else</span> <span class="p">{</span> 
			<span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> 
			<span class="n">j</span><span class="o">++</span><span class="p">;</span> 
		<span class="p">}</span> 
		<span class="n">k</span><span class="o">++</span><span class="p">;</span> 
	<span class="p">}</span> 

	<span class="c1">// Copy the remaining elements </span>
	<span class="c1">// of L[], if there are any </span>
	<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n1</span><span class="p">)</span> <span class="p">{</span> 
		<span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> 
		<span class="n">i</span><span class="o">++</span><span class="p">;</span> 
		<span class="n">k</span><span class="o">++</span><span class="p">;</span> 
	<span class="p">}</span> 

	<span class="c1">// Copy the remaining elements of </span>
	<span class="c1">// R[], if there are any </span>
	<span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">)</span> <span class="p">{</span> 
		<span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> 
		<span class="n">j</span><span class="o">++</span><span class="p">;</span> 
		<span class="n">k</span><span class="o">++</span><span class="p">;</span> 
	<span class="p">}</span> 
<span class="p">}</span> 

<span class="c1">// l is for left index and r is </span>
<span class="c1">// right index of the sub-array </span>
<span class="c1">// of arr to be sorted </span>
<span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> 
<span class="p">{</span> 
	<span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> 
		<span class="c1">// Same as (l+r)/2, but avoids </span>
		<span class="c1">// overflow for large l and r </span>
		<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> 

		<span class="c1">// Sort first and second halves </span>
		<span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span> 
		<span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> 

		<span class="n">merge</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span> 
	<span class="p">}</span> 
<span class="p">}</span> 

<span class="c1">// UTILITY FUNCTIONS </span>
<span class="c1">// Function to print an array </span>
<span class="kt">void</span> <span class="nf">printArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> 
<span class="p">{</span> 
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span> 
	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
		<span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> 
	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> 
<span class="p">}</span> 

<span class="c1">// Driver code </span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span> 
	<span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span> <span class="p">};</span> 
	<span class="kt">int</span> <span class="n">arr_size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> 

	<span class="n">printf</span><span class="p">(</span><span class="s">"Given array is </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> 
	<span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr_size</span><span class="p">);</span> 

	<span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">arr_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> 

	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Sorted array is </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> 
	<span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr_size</span><span class="p">);</span> 
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="C-language"/><category term="merge-sort"/><category term="merge"/><summary type="html"><![CDATA[A post about merge sort by C language]]></summary></entry><entry><title type="html">Loving Your Country</title><link href="https://sarbaz14.github.io/sample-posts/2024/01/17/image.html" rel="alternate" type="text/html" title="Loving Your Country"/><published>2024-01-17T01:20:00+00:00</published><updated>2024-01-17T01:20:00+00:00</updated><id>https://sarbaz14.github.io/sample-posts/2024/01/17/image</id><content type="html" xml:base="https://sarbaz14.github.io/sample-posts/2024/01/17/image.html"><![CDATA[<p>Loving Your Country Is Part Of Faith</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/iran-480.webp 480w,/assets/img/iran-800.webp 800w,/assets/img/iran-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/iran.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="Loving-Country"/><category term="Iran"/><category term="Faith"/><summary type="html"><![CDATA[A hadith about the homeland]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://sarbaz14.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog.html" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://sarbaz14.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://sarbaz14.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog.html"><![CDATA[]]></content><author><name></name></author></entry></feed>